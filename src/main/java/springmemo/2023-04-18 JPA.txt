JPA 
	JAVA Persistence API
		* 관계형 데이터베이스 [ SQL ]를 표현하는 자바 API
		1. 자바에서 ORM 기술 표준으로 사용되는 인터페이스 [ API ] 
		ORM ( Object Relational Mapping ) : 객체-관계-매핑 : 주로 객체 데이터베이스 구축하는 방법
			* 객체와 데이터베이스의 관계 매핑하는 도구

		2. Spring Data JPA : 스프링에서 JPA 지원

		3. CRUD 편리 [ insert , update , select , delete ]

		4. 다양한 환경 / 메소드
			1. 그레이들 라이브러리 등록
				implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
			2. propertice 파일


			
			2. 엔티티 [ 개체 , 실체 ]
				개념 데이터 모델 [ =테이블 ]
				@Entity@Table( name = "category" )
				@Id@GeneratedValue( strategy = GenerationType.IDENTITY)
				@Column
					@Column Default( "데이터" )			: 필드의 기본값 설정
					@Column( 속성명 = 데이터 )
					속성
						1. name = "필드명"			: 생략시 JAVA 필드명
						2. nullable = true/false		: null 허용 여부 [ 기본값 true (허용) ]
						3. unique = true/fasle		: 데이터 중복 불가능 여부 [ 기본값 false (허용) ] 
						4. length = 문자길이		: 기본값(255)
						5. columnDefinition = "sql자료형"	: 해당 필드의 sql 자료형으로 선언 가능

					타입
						JAVA 타입 <---------------> SQL 타입 자동 매핑
						byte			tinyint
						short			smallint
						int			int
						long			bigint
						float			float
						double			double
						boolean			bit
						date			date	
						Localdatetime		datetime
						time			time
						String			varchar(255) [ 기본값 ]

					연관관계매핑 = PK <------------> FK
	
						1. 사용되는 어노테이션
						@ManyToOne		: 다수가 하나에게 [ FK 엔티티쪽에서 선언 ] 1 : M
						@OneToMany		: 하나가 다수에게 [ PK 엔티티쪽에서 선언 ] M : 1
						@OneToOne		: 하나가 하나에게 [ FK 엔티티쪽에서 선언 ] 1 : 1
						@JoinColumn		: FK 필드명 정의
						@ToString.Exclude		: 해당 필드는 ToString 제외
							- 연관관계 객체의 문제점 : 하나의 객체를 호출시 해당 객체의 포함된 객체 호출 --> 무한루프 발생 [ stackoverflow ]
						@Builder.Default		: Builder 메소드 사용시 기본 필드로 사용 [ Builder 에서 정의 안해도 자동 적용 ]

						2. 객체간의 관계 설정

					
			3. 서비스 엔티티 조작할때 @Repository 인터페이스
				1. 선언
					public interface 인터페이스명 extends JpaRepository< 조작할엔티티클레스명 , PK필드의자료형 > { }
				2. 메소드
					CRUD 메소드
						1. save(엔티티)		: 해당 엔티티를 insert
						2. findById( pk )		: 해당 pk값의 엔티티를 찾아서 Optional<엔티티> 반환 select
						3. findAll()		: 모든 List<엔티티>를 select
						4. delete(엔티티)		: 해당 엔티티를 delete
						5. update 없다		: setter 메소드를 이용 [ @Transactional ( commit ) 필수 ] 
					메소드 생성
						* 주의할점 : 필드명은 카멜표기법 , 추상메소드로 정의
						1. findBy필드명		: 해당 필드로 엔티티 검색 
						2. findBy필드명And필드명	: 해당 필드 조건 2개 true 인 엔티티 검색
						3. findBy필드명Or필드명	: 해당 필드 조건 1개라도 true 인 경우 엔티티 검색
						5. existsBy필드명		: 해당 필드 조건의 엔티티 존재여부 true/false 반환
						4. existsBy필드명And필드명	: 해당 필드 조건의 엔티티 존재여부 true/false 반환
						5. existsBy필드명Or필드명	: 해당 필드 조건의 엔티티 존재여부 true/false 반환
					직접 쿼리 작성
						@Query("SQL작성")
				
			4. 자동 날짜 주입
				1. 날짜 클래스를 부모 클래스 선언
					@MappedSuperclass
					@EntityListeners( AuthentingEntityListener.class ) // @EnableJpaAuditing 같이 사용
					public class BaseTime {
						@CreateDate
						public LocalDateTime cdate;
						@LastModifiedDate
						public LocalDateTime udate;
					}
				2. 해당 엔티티에게 extends BaseTime
				3. 스프링 시작 클래스에서 @EnableJpaAuditing 어노테이션 주입
					@EnableJpaAuditing : JPA 실시간 엔티티 변동 감시
			



				공지사항 엔티티 확인 : 
					CategoryEntity
					(cno=1, cname=공지사항,
						 boardEntityList=
							[
								BoardEntity(bno=1, btitle=ㅁㄴㅇ, bcontent=ㅁㄴㅇ, bview=0, replyEntityList=[]), 
								BoardEntity(bno=2, btitle=공지, bcontent=확인, bview=0, replyEntityList=[])
							]
					)


							










