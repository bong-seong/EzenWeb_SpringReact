
	- Day02 - Restful API 주요 어노테이션
	@Controller		: 스프링 컨테이너에 컴포넌트( MVC 컨트롤러)를 등록 = @Component
		- HTTP로부터 요청이 들어왔을때[서블릿 디스패처] 스프링이 해당 요청의 URL 매핑[연결] = 핸들러매핑
		- 매핑[연결] 할려면 스프링은 해당하는 URI들을 알고 있어야하니까.
	@RestController
		- @Controller + @ResponseBody 조합된 어노테이션
	@RequestMapping
		- 클래스명 , 메소드 매핑
		- 스프링 4.3 이전에 메소드 매핑시 많이 사용됨
	@GetMapping
	@PostMapping
	@PutMapping
	@DeleteMapping
		- 스프링 4.3 이후에 메소드 매핑에 주로 사용됨
	@PathVariable
		- /{변수명} 형식의 URI 
	@RequestParam
		- ?변수명=데이터 형식의 URI 매개변수를 요청할때
		- 주로 GET/DELETE 사용
	@RequestBody
		- HTTP  본문(body) 객체를 요청할때
		- 주로 POST/PUT 사용
	@ResponseBody
		- HTTP 객체 형태로 응답할때 






	@Entity
		- DB 테이블과 대응하는 클래스
	@Table( name = " " )
		- DB 테이블명 정의
	@Id
		- PK 필드 선언 [ JPA 사용시 필수 ]

	@GeneratedValue( strategy = GenerationType.IDENTITY )
		- AUTO_INCREMENT	= MySQL
	@GeneratedValue( strategy = GenerationType.SEQUENCE )
		- SEQUENCE		= Oracle

	// 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임
	@GeneratedValue( strategy = GenerationType.TABLE )
		- 테이블내 데이터를 이용한 자동 데이터 주입
	@GeneratedValue( strategy = GenerationType.AUTO )
		- 선언된 매개변수 기준으로 자동 타입 주입
	// 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임 잘안쓸거임

	extends JpaRepository< T , ID >
		- JpaRepository 상속(확장) 받아 새로운 인터페이스 생성
		- 엔티티 인스턴스 [ 객체/레코드 ] 조작하는 역할
		- T : 조작할 엔티티듸 클래스명	/	ID : 해당 엔티티의 PK 필드 자료형






























