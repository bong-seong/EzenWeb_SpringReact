	SPA
	리액트 제공해주는 라이브러리

		1. [ 훅 ] useState()		: 상태관리변수
			1. useState( 필드의초기값 )
			2. 배열형태의 필드와 필드 변경함수 제공
				const [ 필드명 , set필드명 ] = useState( 필드의초기값 )
			3. ** set필드명( 새로운값 ) : 컴포넌트 재실행 [ update ] 재 렌더링
				-주의 : 기존의 주소[객체]값과 새로운 주소[객체]값이 다를 경우
			
			setItems([...items])
				... : 매개변수의 길이가 가변길이
				setItem([ ...배열명] ) 	: 기존배열값을 새로운 배열의 주소값으로 대입
				setItem( [ 1 , 2 , 3 ] ) 	: 1,2,3 포함된 새로운배열을 생성후 대입

				vs

			let newItems = items.map ( (i) => { return i; } )
			setItems( newItems ) 

		2. [ 훅 ] useEffect()		: 컴포넌트 생명주기에 따른 이벤트처리 함수

			-useEffect( () => { } , [ 의존생배열 ] )
			-useEffect( () => { return } , [ 의존생배열 ] )		: update 후 return 실행

			mount		update		unmount
			생성		업데이트		제거

			1. useEffect( () => { } )			mount , update
			2. useEffect( () => { } , [ ] ) 			mount
			3. useEffect( () => { } , [ 특정상태변수 ] ) 	mount, 특정상태변수update
	
		3. 
			axios			: 동기/비동기 통신 함수 ex) ajax [ JQUERY ]
				- 기본 전송타입이 contentType : JSON			

			Restful API				axios
			@GetMapping("URL")			axios.get("URL")
				@RequestParam			axios.get("URL" , { params : { 키:값, 키:값 } } )
				쿼리스트링[ ?변수명=값 ]
			
			@PostMapping("URL")			axios.post("URL")
				@RequestBody			axios.post("URL" , 객체 )
				본문[body] 가능			axios.post("URL" , { 키:값, 키:값 } )

			@PutMapping("URL")			axios.put("URL")
				POST 동일

			@DeleteMapping("URL")			axios.delete("URL")
				GET 동일
			

-- JS 반복문 함수
	1. forEach() 	: return 사용불가능 / return 된 값 반환 안된다.
		리스트/배열명.forEach ( (반복객체명,인덱스) => { } )

	2. map()		: return 사용가능 / return 된 값 새로운배열에 반환 , 조건과 상관없이
		let 새로운배열 = 리스트/배열명.map( () => { return 값 }  )
		let 새로운배열 = 리스트/배열명.map( 반복객체명 => 값   ) : return 값 생략시 중괄호 제거 

	3. filter()		: return 사용가능 / return 된 값 새로운배열에 반환 , 조건에 충족했을때
		리스트/배열명.filter( () => { return 조건식 }  )


















